# By default, wait for all elements to be clickable(for buttons and other applicable) or visible (for input elements) by default.
# visit loginUrl
# wait for the presence of loginButton in button and click it
# listens until the current url contains chatUrl
# send username string to usernameElement
# send password to passwordElement
# when searchWeb element is clickable, click on it to toggle "search web option"
# for each nElement, look for the element with the highest value of "n" and take note of "n"
# in a loop(for each input), sends input to the textArea element and clicks enter
#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.pointer-events-none.absolute.inset-x-0.bottom-0.z-0.mx-auto.flex.w-full.max-w-3xl.flex-col.items-center.justify-center.md\:px-5.md\:py-8.xl\:max-w-4xl.\[\&\>\*\]\:pointer-events-auto > div.dark\:via-gray-80.w-full.bg-gradient-to-t.from-white.via-white\/80.to-white\/0.dark\:border-gray-800.dark\:from-gray-900.dark\:to-gray-900\/0.max-md\:border-t.max-md\:bg-white.max-md\:px-4.max-md\:dark\:bg-gray-900 > form > div > div > textarea
# keep taking note of "n"-highest in the available nElements on the page, and if the instantaneously measured n-highest has increased by one, then a new response is on the page
# grab the text content of the nElement with the new hightest "n" as the new response and store it as a variable 'currentResponse'
# repeat the loop for accepting input, and checking the initial value of n, and final value of n...






















































# wait for all elements to be clickable or visible (for text input elements) by default.

# visit a url:
huggingface.co/chat

# wait for the presence of this sign in button and click it
body > div:nth-child(3) > div > div > div > form > button

# listens until the current url contains "huggingface.co/login"

# send username string to this element
body > div > main > div > section > form > div.mb-8.grid.grid-cols-1.gap-3 > label:nth-child(1) > input

# send password to this element and click enter
body > div > main > div > section > form > div.mb-8.grid.grid-cols-1.gap-3 > label:nth-child(2) > input

# when this element is clickable, click on it to toggle "search web option"
#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.pointer-events-none.absolute.inset-x-0.bottom-0.z-0.mx-auto.flex.w-full.max-w-3xl.flex-col.items-center.justify-center.md\:px-5.md\:py-8.xl\:max-w-4xl.\[\&\>\*\]\:pointer-events-auto > div.dark\:via-gray-80.w-full.bg-gradient-to-t.from-white.via-white\/80.to-white\/0.dark\:border-gray-800.dark\:from-gray-900.dark\:to-gray-900\/0.max-md\:border-t.max-md\:bg-white.max-md\:px-4.max-md\:dark\:bg-gray-900 > div.flex.w-full.pb-3.max-md\:pt-3 > div > div.relative.inline-flex.h-5.w-9.shrink-0.items-center.rounded-full.bg-gray-300.p-1.shadow-inner.ring-gray-400.transition-all.peer-checked\:bg-blue-600.peer-focus-visible\:ring.peer-focus-visible\:ring-offset-1.hover\:bg-gray-400.dark\:bg-gray-600.peer-checked\:\[\&\>div\]\:translate-x-3\.5 > div

# for elements with this structure, look for the element with the highest value of "n" and take note of "n"
#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.scrollbar-custom.mr-1.h-full.overflow-y-auto > div > div:nth-child(n)

# in a loop, sends input to this textarea and clicks enter
#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.pointer-events-none.absolute.inset-x-0.bottom-0.z-0.mx-auto.flex.w-full.max-w-3xl.flex-col.items-center.justify-center.md\:px-5.md\:py-8.xl\:max-w-4xl.\[\&\>\*\]\:pointer-events-auto > div.dark\:via-gray-80.w-full.bg-gradient-to-t.from-white.via-white\/80.to-white\/0.dark\:border-gray-800.dark\:from-gray-900.dark\:to-gray-900\/0.max-md\:border-t.max-md\:bg-white.max-md\:px-4.max-md\:dark\:bg-gray-900 > form > div > div > textarea
 
# keep taking note of "n"-highest and if n-highest has increased by one, then a new response is on the page
#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.scrollbar-custom.mr-1.h-full.overflow-y-auto > div > div:nth-child(n)

# grab the text content of the highest value of n's element and store it as a variable.

# repeat the loop for accepting input, and checking the initial value of n, and final value of n...
































































# take the latest answer:
#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.scrollbar-custom.mr-1.h-full.overflow-y-auto > div > div:nth-child(n)





#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.scrollbar-custom.mr-1.h-full.overflow-y-auto > div > div:nth-child(7)


#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.scrollbar-custom.mr-1.h-full.overflow-y-auto > div > div:nth-child(n)

# try as guest
body > div:nth-child(3) > div > div > div > div > form:nth-child(1) > button





















const { chromium } = require('playwright');
const axios = require('axios');
const express = require('express');
const app = express();
const fs = require('fs');
const path = require('path');
const ini = require('ini');
const { promisify } = require('util');
const renameAsync = promisify(fs.rename);

const settingsFilePath = process.argv.includes('--settings')
    ? process.argv[process.argv.indexOf('--settings') + 1]
    : path.join(__dirname, 'settings.ini');

if (!fs.existsSync(settingsFilePath)) {
    fs.writeFileSync(settingsFilePath, 'ioFolder = .\n');
}

const settings = ini.parse(fs.readFileSync(settingsFilePath, 'utf-8'));

const inputFolderPath = path.join(settings.DEFAULT.ioFolder, 'input');

if (!fs.existsSync(inputFolderPath)) {
    fs.mkdirSync(inputFolderPath);
}

const username = settings.login.username;
const password = settings.login.password;
const chatUrl = "huggingface.co/chat"
const loginUrl = "huggingface.co/login"
const loginButton = "body > div:nth-child(3) > div > div > div > form > button"
const usernameElement = "body > div > main > div > section > form > div.mb-8.grid.grid-cols-1.gap-3 > label:nth-child(1) > input"
const passwordElement = "body > div > main > div > section > form > div.mb-8.grid.grid-cols-1.gap-3 > label:nth-child(2) > input"
const searchWeb = "#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.pointer-events-none.absolute.inset-x-0.bottom-0.z-0.mx-auto.flex.w-full.max-w-3xl.flex-col.items-center.justify-center.md\:px-5.md\:py-8.xl\:max-w-4xl.\[\&\>\*\]\:pointer-events-auto > div.dark\:via-gray-80.w-full.bg-gradient-to-t.from-white.via-white\/80.to-white\/0.dark\:border-gray-800.dark\:from-gray-900.dark\:to-gray-900\/0.max-md\:border-t.max-md\:bg-white.max-md\:px-4.max-md\:dark\:bg-gray-900 > div.flex.w-full.pb-3.max-md\:pt-3 > div > div.relative.inline-flex.h-5.w-9.shrink-0.items-center.rounded-full.bg-gray-300.p-1.shadow-inner.ring-gray-400.transition-all.peer-checked\:bg-blue-600.peer-focus-visible\:ring.peer-focus-visible\:ring-offset-1.hover\:bg-gray-400.dark\:bg-gray-600.peer-checked\:\[\&\>div\]\:translate-x-3\.5 > div"
const nElement = "#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.scrollbar-custom.mr-1.h-full.overflow-y-auto > div > div:nth-child(n)"
const textArea = "#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.pointer-events-none.absolute.inset-x-0.bottom-0.z-0.mx-auto.flex.w-full.max-w-3xl.flex-col.items-center.justify-center.md\:px-5.md\:py-8.xl\:max-w-4xl.\[\&\>\*\]\:pointer-events-auto > div.dark\:via-gray-80.w-full.bg-gradient-to-t.from-white.via-white\/80.to-white\/0.dark\:border-gray-800.dark\:from-gray-900.dark\:to-gray-900\/0.max-md\:border-t.max-md\:bg-white.max-md\:px-4.max-md\:dark\:bg-gray-900 > form > div > div > textarea"


let page;

// (async function initializePage() {
//     const browser = await chromium.launch();
//     const context = await browser.newContext();
//     page = await context.newPage();
// })();

async function initializePage() {
    const browser = await chromium.launch();
    const context = await browser.newContext();
    page = await context.newPage();
}

// let page;

async function initializePage() {
    const browser = await chromium.launch();
    const context = await browser.newContext();
    page = await context.newPage();
}

// async function main() {
//     await initializePage();
//     // Now you can use 'page' in your other functions
//     await processFile();
// }
//
// main();

initializePage();

async function performActions(page, loginUrl, loginButton, chatUrl, usernameElement, username, passwordElement, password, searchWeb) {
    // Visit loginUrl
    await page.goto(loginUrl);
    await page.waitForLoadState('networkidle');

    // Wait for the presence of loginButton and click it
    await page.waitForSelector(loginButton, { state: 'visible' });
    await page.click(loginButton);

    // Listen until the current url contains chatUrl
    await page.waitForNavigation({ url: `**/${chatUrl}**` });

    // Send username string to usernameElement
    await page.waitForSelector(usernameElement, { state: 'visible' });
    await page.fill(usernameElement, username);

    // Send password to passwordElement
    await page.waitForSelector(passwordElement, { state: 'visible' });
    await page.fill(passwordElement, password);
    await page.press(passwordElement, 'Enter');

    // When searchWeb element is clickable, click on it to toggle "search web option"
    await page.waitForSelector(searchWeb, { state: 'visible' });
    await page.click(searchWeb);
}

async function main() {
    await initializePage();
    await performActions(page, loginUrl, loginButton, chatUrl, usernameElement, username, passwordElement, password, searchWeb);
}

main();

async function processFile(filePath) {
    // var n = 0;
    // const nElement = "#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.scrollbar-custom.mr-1.h-full.overflow-y-auto > div > div:nth-child(n)"

    // Read and parse the file
    const fileContents = JSON.parse(fs.readFileSync(filePath, 'utf-8'));

    // Get the input from the file
    const currentInput = fileContents.input;

    let elements = await page.$$(nElement.replace('n', '*'));

    // If elements exist, set n to the value of the last element
    let n = elements.length > 0 ? parseInt(elements[elements.length - 1].id.match(/:nth-child\((\d+)\)/)[1]) : 0;

    await page.waitForSelector(textArea, {state:'visible'});
    await page.fill(textArea, currentInput);
    await page.press(textArea, 'Enter');

    await page.waitForNavigation({ waitUntil: 'networkidle0' });

    n++;

    await page.waitForSelector(nElement.replace('n', n), {state: 'attached'});

    const newElement = await page.$(nElement.replace('n', n));
    const currentResponse = await newElement.textContent();
    console.log(currentResponse);


    fs.appendFileSync(filePath, '\n{"output":$$(currentResponse)}');

    fs.renameSync(filePath, `${filePath}t`);
}






// async function processFile(filePath) {
//     // Initialize nElement in the function's scope
//     const n = 0; // Set initial value for n
//     const nElement = "#app > div.grid.h-full.w-screen.grid-cols-1.grid-rows-\[auto\,1fr\].overflow-hidden.text-smd.dark\:text-gray-300.md\:grid-cols-\[280px\,1fr\].md\:grid-rows-\[1fr\] > div > div.scrollbar-custom.mr-1.h-full.overflow-y-auto > div > div:nth-child(n)"
//
//     // Read and parse the file
//     const fileContents = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
//
//     // Get the input from the file
//     const currentInput = fileContents.input;
//
//     let elements = await page.$$(nElement.replace('n', '*'));
//
//     // If elements exist, set n to the value of the last element
//     if (elements.length > 0) {
//         n = parseInt(elements[elements.length - 1].id.match(/:nth-child\((\d+)\)/)[1]);
//     }
//
//     await page.waitForSelector(textArea, {state:'visible'});
//     await page.fill(textArea, currentInput);
//     await page.press(textArea, 'Enter');
//
//     await page.waitForNavigation({ waitUntil: 'networkidle0' });
//
//     n++;
//
//     await page.waitForSelector(nElement.replace('n', n), {state: 'attached'});
//
//     const newElement = await page.$(nElement.replace('n', n));
//     const currentResponse = await newElement.textContent();
//     console.log(currentResponse);
//
//
//     fs.appendFileSync(filePath, '\n{"output":$$(currentResponse)}');
//
//     fs.renameSync(filePath, `${filePath}t`);
// }
//
//


async function checkForNewFiles() {

    const files = fs.readdirSync(inputFolderPath);

    files.forEach((file) => {
        if (!file.endsWith('t')) {
            processFile(path.join(inputFolderPath, file));
        }
    });

    setTimeout(checkForNewFiles, 1000);
}

checkForNewFiles();








